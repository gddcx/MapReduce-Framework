// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: rpc.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_rpc_2eproto;
namespace masterSlaveRPC {
class EventMessage;
struct EventMessageDefaultTypeInternal;
extern EventMessageDefaultTypeInternal _EventMessage_default_instance_;
class Id;
struct IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class JobMessage;
struct JobMessageDefaultTypeInternal;
extern JobMessageDefaultTypeInternal _JobMessage_default_instance_;
class MapDataList;
struct MapDataListDefaultTypeInternal;
extern MapDataListDefaultTypeInternal _MapDataList_default_instance_;
class NodeMessage;
struct NodeMessageDefaultTypeInternal;
extern NodeMessageDefaultTypeInternal _NodeMessage_default_instance_;
}  // namespace masterSlaveRPC
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace masterSlaveRPC {
enum TaskType : int {
  map = 0,
  reduce = 1,
  fetch = 2,
  TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TaskType_IsValid(int value);
extern const uint32_t TaskType_internal_data_[];
constexpr TaskType TaskType_MIN = static_cast<TaskType>(0);
constexpr TaskType TaskType_MAX = static_cast<TaskType>(2);
constexpr int TaskType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TaskType_descriptor();
template <typename T>
const std::string& TaskType_Name(T value) {
  static_assert(std::is_same<T, TaskType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TaskType_Name().");
  return TaskType_Name(static_cast<TaskType>(value));
}
template <>
inline const std::string& TaskType_Name(TaskType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TaskType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TaskType_Parse(absl::string_view name, TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskType>(
      TaskType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class NodeMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:masterSlaveRPC.NodeMessage) */ {
 public:
  inline NodeMessage() : NodeMessage(nullptr) {}
  ~NodeMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline NodeMessage(const NodeMessage& from) : NodeMessage(nullptr, from) {}
  inline NodeMessage(NodeMessage&& from) noexcept
      : NodeMessage(nullptr, std::move(from)) {}
  inline NodeMessage& operator=(const NodeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeMessage& operator=(NodeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeMessage* internal_default_instance() {
    return reinterpret_cast<const NodeMessage*>(
        &_NodeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NodeMessage& a, NodeMessage& b) { a.Swap(&b); }
  inline void Swap(NodeMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NodeMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeMessage& from) { NodeMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NodeMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "masterSlaveRPC.NodeMessage"; }

 protected:
  explicit NodeMessage(::google::protobuf::Arena* arena);
  NodeMessage(::google::protobuf::Arena* arena, const NodeMessage& from);
  NodeMessage(::google::protobuf::Arena* arena, NodeMessage&& from) noexcept
      : NodeMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeNameFieldNumber = 1,
  };
  // string nodeName = 1;
  void clear_nodename() ;
  const std::string& nodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodename(Arg_&& arg, Args_... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* value);

  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(
      const std::string& value);
  std::string* _internal_mutable_nodename();

  public:
  // @@protoc_insertion_point(class_scope:masterSlaveRPC.NodeMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NodeMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NodeMessage& from_msg);
    ::google::protobuf::internal::ArenaStringPtr nodename_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MapDataList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:masterSlaveRPC.MapDataList) */ {
 public:
  inline MapDataList() : MapDataList(nullptr) {}
  ~MapDataList() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MapDataList(
      ::google::protobuf::internal::ConstantInitialized);

  inline MapDataList(const MapDataList& from) : MapDataList(nullptr, from) {}
  inline MapDataList(MapDataList&& from) noexcept
      : MapDataList(nullptr, std::move(from)) {}
  inline MapDataList& operator=(const MapDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapDataList& operator=(MapDataList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapDataList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapDataList* internal_default_instance() {
    return reinterpret_cast<const MapDataList*>(
        &_MapDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MapDataList& a, MapDataList& b) { a.Swap(&b); }
  inline void Swap(MapDataList* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapDataList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapDataList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MapDataList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MapDataList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MapDataList& from) { MapDataList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MapDataList* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "masterSlaveRPC.MapDataList"; }

 protected:
  explicit MapDataList(::google::protobuf::Arena* arena);
  MapDataList(::google::protobuf::Arena* arena, const MapDataList& from);
  MapDataList(::google::protobuf::Arena* arena, MapDataList&& from) noexcept
      : MapDataList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
  };
  // repeated string filename = 1;
  int filename_size() const;
  private:
  int _internal_filename_size() const;

  public:
  void clear_filename() ;
  const std::string& filename(int index) const;
  std::string* mutable_filename(int index);
  void set_filename(int index, const std::string& value);
  void set_filename(int index, std::string&& value);
  void set_filename(int index, const char* value);
  void set_filename(int index, const char* value, std::size_t size);
  void set_filename(int index, absl::string_view value);
  std::string* add_filename();
  void add_filename(const std::string& value);
  void add_filename(std::string&& value);
  void add_filename(const char* value);
  void add_filename(const char* value, std::size_t size);
  void add_filename(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& filename() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_filename();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_filename() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:masterSlaveRPC.MapDataList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MapDataList_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MapDataList& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> filename_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Id final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:masterSlaveRPC.Id) */ {
 public:
  inline Id() : Id(nullptr) {}
  ~Id() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Id(
      ::google::protobuf::internal::ConstantInitialized);

  inline Id(const Id& from) : Id(nullptr, from) {}
  inline Id(Id&& from) noexcept
      : Id(nullptr, std::move(from)) {}
  inline Id& operator=(const Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline Id& operator=(Id&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Id& default_instance() {
    return *internal_default_instance();
  }
  static inline const Id* internal_default_instance() {
    return reinterpret_cast<const Id*>(
        &_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Id& a, Id& b) { a.Swap(&b); }
  inline void Swap(Id* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Id* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Id* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Id>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Id& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Id& from) { Id::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Id* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "masterSlaveRPC.Id"; }

 protected:
  explicit Id(::google::protobuf::Arena* arena);
  Id(::google::protobuf::Arena* arena, const Id& from);
  Id(::google::protobuf::Arena* arena, Id&& from) noexcept
      : Id(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdFieldNumber = 1,
    kJobIdFieldNumber = 2,
  };
  // uint32 taskId = 1;
  void clear_taskid() ;
  ::uint32_t taskid() const;
  void set_taskid(::uint32_t value);

  private:
  ::uint32_t _internal_taskid() const;
  void _internal_set_taskid(::uint32_t value);

  public:
  // uint32 jobId = 2;
  void clear_jobid() ;
  ::uint32_t jobid() const;
  void set_jobid(::uint32_t value);

  private:
  ::uint32_t _internal_jobid() const;
  void _internal_set_jobid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:masterSlaveRPC.Id)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Id_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Id& from_msg);
    ::uint32_t taskid_;
    ::uint32_t jobid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class EventMessage final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:masterSlaveRPC.EventMessage) */ {
 public:
  inline EventMessage() : EventMessage(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventMessage(const EventMessage& from) : EventMessage(nullptr, from) {}
  inline EventMessage(EventMessage&& from) noexcept
      : EventMessage(nullptr, std::move(from)) {}
  inline EventMessage& operator=(const EventMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMessage& operator=(EventMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMessage* internal_default_instance() {
    return reinterpret_cast<const EventMessage*>(
        &_EventMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(EventMessage& a, EventMessage& b) { a.Swap(&b); }
  inline void Swap(EventMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<EventMessage>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EventMessage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EventMessage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "masterSlaveRPC.EventMessage"; }

 protected:
  explicit EventMessage(::google::protobuf::Arena* arena);
  EventMessage(::google::protobuf::Arena* arena, const EventMessage& from);
  EventMessage(::google::protobuf::Arena* arena, EventMessage&& from) noexcept
      : EventMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:masterSlaveRPC.EventMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EventMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventMessage& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class JobMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:masterSlaveRPC.JobMessage) */ {
 public:
  inline JobMessage() : JobMessage(nullptr) {}
  ~JobMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR JobMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline JobMessage(const JobMessage& from) : JobMessage(nullptr, from) {}
  inline JobMessage(JobMessage&& from) noexcept
      : JobMessage(nullptr, std::move(from)) {}
  inline JobMessage& operator=(const JobMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobMessage& operator=(JobMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobMessage* internal_default_instance() {
    return reinterpret_cast<const JobMessage*>(
        &_JobMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(JobMessage& a, JobMessage& b) { a.Swap(&b); }
  inline void Swap(JobMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<JobMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JobMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const JobMessage& from) { JobMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JobMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "masterSlaveRPC.JobMessage"; }

 protected:
  explicit JobMessage(::google::protobuf::Arena* arena);
  JobMessage(::google::protobuf::Arena* arena, const JobMessage& from);
  JobMessage(::google::protobuf::Arena* arena, JobMessage&& from) noexcept
      : JobMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kIdFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 3;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // .masterSlaveRPC.Id id = 4;
  bool has_id() const;
  void clear_id() ;
  const ::masterSlaveRPC::Id& id() const;
  PROTOBUF_NODISCARD ::masterSlaveRPC::Id* release_id();
  ::masterSlaveRPC::Id* mutable_id();
  void set_allocated_id(::masterSlaveRPC::Id* value);
  void unsafe_arena_set_allocated_id(::masterSlaveRPC::Id* value);
  ::masterSlaveRPC::Id* unsafe_arena_release_id();

  private:
  const ::masterSlaveRPC::Id& _internal_id() const;
  ::masterSlaveRPC::Id* _internal_mutable_id();

  public:
  // .masterSlaveRPC.TaskType type = 1;
  void clear_type() ;
  ::masterSlaveRPC::TaskType type() const;
  void set_type(::masterSlaveRPC::TaskType value);

  private:
  ::masterSlaveRPC::TaskType _internal_type() const;
  void _internal_set_type(::masterSlaveRPC::TaskType value);

  public:
  // @@protoc_insertion_point(class_scope:masterSlaveRPC.JobMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_JobMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const JobMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::masterSlaveRPC::Id* id_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NodeMessage

// string nodeName = 1;
inline void NodeMessage::clear_nodename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& NodeMessage::nodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:masterSlaveRPC.NodeMessage.nodeName)
  return _internal_nodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NodeMessage::set_nodename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:masterSlaveRPC.NodeMessage.nodeName)
}
inline std::string* NodeMessage::mutable_nodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:masterSlaveRPC.NodeMessage.nodeName)
  return _s;
}
inline const std::string& NodeMessage::_internal_nodename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodename_.Get();
}
inline void NodeMessage::_internal_set_nodename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodename_.Set(value, GetArena());
}
inline std::string* NodeMessage::_internal_mutable_nodename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nodename_.Mutable( GetArena());
}
inline std::string* NodeMessage::release_nodename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:masterSlaveRPC.NodeMessage.nodeName)
  return _impl_.nodename_.Release();
}
inline void NodeMessage::set_allocated_nodename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodename_.IsDefault()) {
          _impl_.nodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterSlaveRPC.NodeMessage.nodeName)
}

// -------------------------------------------------------------------

// Id

// uint32 taskId = 1;
inline void Id::clear_taskid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.taskid_ = 0u;
}
inline ::uint32_t Id::taskid() const {
  // @@protoc_insertion_point(field_get:masterSlaveRPC.Id.taskId)
  return _internal_taskid();
}
inline void Id::set_taskid(::uint32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:masterSlaveRPC.Id.taskId)
}
inline ::uint32_t Id::_internal_taskid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.taskid_;
}
inline void Id::_internal_set_taskid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.taskid_ = value;
}

// uint32 jobId = 2;
inline void Id::clear_jobid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jobid_ = 0u;
}
inline ::uint32_t Id::jobid() const {
  // @@protoc_insertion_point(field_get:masterSlaveRPC.Id.jobId)
  return _internal_jobid();
}
inline void Id::set_jobid(::uint32_t value) {
  _internal_set_jobid(value);
  // @@protoc_insertion_point(field_set:masterSlaveRPC.Id.jobId)
}
inline ::uint32_t Id::_internal_jobid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jobid_;
}
inline void Id::_internal_set_jobid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jobid_ = value;
}

// -------------------------------------------------------------------

// JobMessage

// .masterSlaveRPC.TaskType type = 1;
inline void JobMessage::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::masterSlaveRPC::TaskType JobMessage::type() const {
  // @@protoc_insertion_point(field_get:masterSlaveRPC.JobMessage.type)
  return _internal_type();
}
inline void JobMessage::set_type(::masterSlaveRPC::TaskType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:masterSlaveRPC.JobMessage.type)
}
inline ::masterSlaveRPC::TaskType JobMessage::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::masterSlaveRPC::TaskType>(_impl_.type_);
}
inline void JobMessage::_internal_set_type(::masterSlaveRPC::TaskType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string key = 2;
inline void JobMessage::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& JobMessage::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:masterSlaveRPC.JobMessage.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JobMessage::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:masterSlaveRPC.JobMessage.key)
}
inline std::string* JobMessage::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:masterSlaveRPC.JobMessage.key)
  return _s;
}
inline const std::string& JobMessage::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void JobMessage::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* JobMessage::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* JobMessage::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:masterSlaveRPC.JobMessage.key)
  return _impl_.key_.Release();
}
inline void JobMessage::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterSlaveRPC.JobMessage.key)
}

// string value = 3;
inline void JobMessage::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& JobMessage::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:masterSlaveRPC.JobMessage.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JobMessage::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:masterSlaveRPC.JobMessage.value)
}
inline std::string* JobMessage::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:masterSlaveRPC.JobMessage.value)
  return _s;
}
inline const std::string& JobMessage::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void JobMessage::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* JobMessage::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* JobMessage::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:masterSlaveRPC.JobMessage.value)
  return _impl_.value_.Release();
}
inline void JobMessage::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterSlaveRPC.JobMessage.value)
}

// .masterSlaveRPC.Id id = 4;
inline bool JobMessage::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline void JobMessage::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::masterSlaveRPC::Id& JobMessage::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::masterSlaveRPC::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterSlaveRPC::Id&>(::masterSlaveRPC::_Id_default_instance_);
}
inline const ::masterSlaveRPC::Id& JobMessage::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:masterSlaveRPC.JobMessage.id)
  return _internal_id();
}
inline void JobMessage::unsafe_arena_set_allocated_id(::masterSlaveRPC::Id* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = reinterpret_cast<::masterSlaveRPC::Id*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterSlaveRPC.JobMessage.id)
}
inline ::masterSlaveRPC::Id* JobMessage::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterSlaveRPC::Id* released = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::masterSlaveRPC::Id* JobMessage::unsafe_arena_release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:masterSlaveRPC.JobMessage.id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterSlaveRPC::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::masterSlaveRPC::Id* JobMessage::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::masterSlaveRPC::Id>(GetArena());
    _impl_.id_ = reinterpret_cast<::masterSlaveRPC::Id*>(p);
  }
  return _impl_.id_;
}
inline ::masterSlaveRPC::Id* JobMessage::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::masterSlaveRPC::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:masterSlaveRPC.JobMessage.id)
  return _msg;
}
inline void JobMessage::set_allocated_id(::masterSlaveRPC::Id* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.id_ = reinterpret_cast<::masterSlaveRPC::Id*>(value);
  // @@protoc_insertion_point(field_set_allocated:masterSlaveRPC.JobMessage.id)
}

// -------------------------------------------------------------------

// MapDataList

// repeated string filename = 1;
inline int MapDataList::_internal_filename_size() const {
  return _internal_filename().size();
}
inline int MapDataList::filename_size() const {
  return _internal_filename_size();
}
inline void MapDataList::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Clear();
}
inline std::string* MapDataList::add_filename()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_filename()->Add();
  // @@protoc_insertion_point(field_add_mutable:masterSlaveRPC.MapDataList.filename)
  return _s;
}
inline const std::string& MapDataList::filename(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:masterSlaveRPC.MapDataList.filename)
  return _internal_filename().Get(index);
}
inline std::string* MapDataList::mutable_filename(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:masterSlaveRPC.MapDataList.filename)
  return _internal_mutable_filename()->Mutable(index);
}
inline void MapDataList::set_filename(int index, const std::string& value) {
  _internal_mutable_filename()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:masterSlaveRPC.MapDataList.filename)
}
inline void MapDataList::set_filename(int index, std::string&& value) {
  _internal_mutable_filename()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:masterSlaveRPC.MapDataList.filename)
}
inline void MapDataList::set_filename(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_filename()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterSlaveRPC.MapDataList.filename)
}
inline void MapDataList::set_filename(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_filename()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterSlaveRPC.MapDataList.filename)
}
inline void MapDataList::set_filename(int index, absl::string_view value) {
  _internal_mutable_filename()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:masterSlaveRPC.MapDataList.filename)
}
inline void MapDataList::add_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filename()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterSlaveRPC.MapDataList.filename)
}
inline void MapDataList::add_filename(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filename()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:masterSlaveRPC.MapDataList.filename)
}
inline void MapDataList::add_filename(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filename()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterSlaveRPC.MapDataList.filename)
}
inline void MapDataList::add_filename(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filename()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterSlaveRPC.MapDataList.filename)
}
inline void MapDataList::add_filename(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_filename()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:masterSlaveRPC.MapDataList.filename)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MapDataList::filename() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:masterSlaveRPC.MapDataList.filename)
  return _internal_filename();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MapDataList::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:masterSlaveRPC.MapDataList.filename)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filename();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MapDataList::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MapDataList::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filename_;
}

// -------------------------------------------------------------------

// EventMessage

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace masterSlaveRPC


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::masterSlaveRPC::TaskType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::masterSlaveRPC::TaskType>() {
  return ::masterSlaveRPC::TaskType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto_2epb_2eh
