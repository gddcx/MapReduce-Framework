// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto
#ifndef GRPC_rpc_2eproto__INCLUDED
#define GRPC_rpc_2eproto__INCLUDED

#include "rpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace masterSlaveRPC {

class JobRpc final {
 public:
  static constexpr char const* service_full_name() {
    return "masterSlaveRPC.JobRpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::masterSlaveRPC::JobMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::JobMessage>> AsyncRequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::JobMessage>>(AsyncRequireJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::JobMessage>> PrepareAsyncRequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::JobMessage>>(PrepareAsyncRequireJobRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::masterSlaveRPC::MapDataList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::MapDataList>> AsyncFetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::MapDataList>>(AsyncFetchDataFromMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::MapDataList>> PrepareAsyncFetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::MapDataList>>(PrepareAsyncFetchDataFromMapRaw(context, request, cq));
    }
    virtual ::grpc::Status ReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncReportJobStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncReportJobStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status ReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncReportEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncReportEventRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::JobMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::JobMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::MapDataList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::MapDataList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::JobMessage>* AsyncRequireJobRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::JobMessage>* PrepareAsyncRequireJobRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::MapDataList>* AsyncFetchDataFromMapRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterSlaveRPC::MapDataList>* PrepareAsyncFetchDataFromMapRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncReportJobStatusRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncReportJobStatusRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncReportEventRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncReportEventRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::masterSlaveRPC::JobMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::JobMessage>> AsyncRequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::JobMessage>>(AsyncRequireJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::JobMessage>> PrepareAsyncRequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::JobMessage>>(PrepareAsyncRequireJobRaw(context, request, cq));
    }
    ::grpc::Status FetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::masterSlaveRPC::MapDataList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::MapDataList>> AsyncFetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::MapDataList>>(AsyncFetchDataFromMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::MapDataList>> PrepareAsyncFetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::MapDataList>>(PrepareAsyncFetchDataFromMapRaw(context, request, cq));
    }
    ::grpc::Status ReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncReportJobStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncReportJobStatusRaw(context, request, cq));
    }
    ::grpc::Status ReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncReportEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncReportEventRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::JobMessage* response, std::function<void(::grpc::Status)>) override;
      void RequireJob(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::JobMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::MapDataList* response, std::function<void(::grpc::Status)>) override;
      void FetchDataFromMap(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::MapDataList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ReportJobStatus(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ReportEvent(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::JobMessage>* AsyncRequireJobRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::JobMessage>* PrepareAsyncRequireJobRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::MapDataList>* AsyncFetchDataFromMapRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::masterSlaveRPC::MapDataList>* PrepareAsyncFetchDataFromMapRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncReportJobStatusRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncReportJobStatusRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncReportEventRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncReportEventRaw(::grpc::ClientContext* context, const ::masterSlaveRPC::EventMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequireJob_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchDataFromMap_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportJobStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportEvent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequireJob(::grpc::ServerContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::JobMessage* response);
    virtual ::grpc::Status FetchDataFromMap(::grpc::ServerContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::MapDataList* response);
    virtual ::grpc::Status ReportJobStatus(::grpc::ServerContext* context, const ::masterSlaveRPC::NodeMessage* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status ReportEvent(::grpc::ServerContext* context, const ::masterSlaveRPC::EventMessage* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequireJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequireJob() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequireJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequireJob(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::JobMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequireJob(::grpc::ServerContext* context, ::masterSlaveRPC::NodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::masterSlaveRPC::JobMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchDataFromMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchDataFromMap() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FetchDataFromMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchDataFromMap(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::MapDataList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchDataFromMap(::grpc::ServerContext* context, ::masterSlaveRPC::NodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::masterSlaveRPC::MapDataList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportJobStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReportJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportJobStatus(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportJobStatus(::grpc::ServerContext* context, ::masterSlaveRPC::NodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportEvent() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::EventMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportEvent(::grpc::ServerContext* context, ::masterSlaveRPC::EventMessage* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequireJob<WithAsyncMethod_FetchDataFromMap<WithAsyncMethod_ReportJobStatus<WithAsyncMethod_ReportEvent<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequireJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequireJob() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::JobMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::JobMessage* response) { return this->RequireJob(context, request, response); }));}
    void SetMessageAllocatorFor_RequireJob(
        ::grpc::MessageAllocator< ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::JobMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::JobMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequireJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequireJob(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::JobMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequireJob(
      ::grpc::CallbackServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::JobMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchDataFromMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchDataFromMap() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::MapDataList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::masterSlaveRPC::NodeMessage* request, ::masterSlaveRPC::MapDataList* response) { return this->FetchDataFromMap(context, request, response); }));}
    void SetMessageAllocatorFor_FetchDataFromMap(
        ::grpc::MessageAllocator< ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::MapDataList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::MapDataList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchDataFromMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchDataFromMap(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::MapDataList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchDataFromMap(
      ::grpc::CallbackServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::MapDataList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReportJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportJobStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::masterSlaveRPC::NodeMessage, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::masterSlaveRPC::NodeMessage* request, ::google::protobuf::Empty* response) { return this->ReportJobStatus(context, request, response); }));}
    void SetMessageAllocatorFor_ReportJobStatus(
        ::grpc::MessageAllocator< ::masterSlaveRPC::NodeMessage, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::masterSlaveRPC::NodeMessage, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReportJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportJobStatus(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportJobStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportEvent() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::masterSlaveRPC::EventMessage, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::masterSlaveRPC::EventMessage* request, ::google::protobuf::Empty* response) { return this->ReportEvent(context, request, response); }));}
    void SetMessageAllocatorFor_ReportEvent(
        ::grpc::MessageAllocator< ::masterSlaveRPC::EventMessage, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::masterSlaveRPC::EventMessage, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::EventMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::masterSlaveRPC::EventMessage* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequireJob<WithCallbackMethod_FetchDataFromMap<WithCallbackMethod_ReportJobStatus<WithCallbackMethod_ReportEvent<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequireJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequireJob() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequireJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequireJob(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::JobMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchDataFromMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchDataFromMap() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FetchDataFromMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchDataFromMap(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::MapDataList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportJobStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReportJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportJobStatus(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportEvent() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::EventMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequireJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequireJob() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequireJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequireJob(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::JobMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequireJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchDataFromMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchDataFromMap() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FetchDataFromMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchDataFromMap(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::MapDataList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchDataFromMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportJobStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReportJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportJobStatus(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportJobStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportEvent() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::EventMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequireJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequireJob() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequireJob(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequireJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequireJob(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::JobMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequireJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchDataFromMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchDataFromMap() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchDataFromMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchDataFromMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchDataFromMap(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::MapDataList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchDataFromMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportJobStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportJobStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReportJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportJobStatus(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportJobStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportEvent() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportEvent(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::EventMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequireJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequireJob() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::JobMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::JobMessage>* streamer) {
                       return this->StreamedRequireJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequireJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequireJob(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::JobMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequireJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::masterSlaveRPC::NodeMessage,::masterSlaveRPC::JobMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchDataFromMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchDataFromMap() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::MapDataList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::masterSlaveRPC::NodeMessage, ::masterSlaveRPC::MapDataList>* streamer) {
                       return this->StreamedFetchDataFromMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchDataFromMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchDataFromMap(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::masterSlaveRPC::MapDataList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchDataFromMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::masterSlaveRPC::NodeMessage,::masterSlaveRPC::MapDataList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportJobStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportJobStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::masterSlaveRPC::NodeMessage, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::masterSlaveRPC::NodeMessage, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedReportJobStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReportJobStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportJobStatus(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::NodeMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportJobStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::masterSlaveRPC::NodeMessage,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportEvent() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::masterSlaveRPC::EventMessage, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::masterSlaveRPC::EventMessage, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedReportEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReportEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportEvent(::grpc::ServerContext* /*context*/, const ::masterSlaveRPC::EventMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::masterSlaveRPC::EventMessage,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequireJob<WithStreamedUnaryMethod_FetchDataFromMap<WithStreamedUnaryMethod_ReportJobStatus<WithStreamedUnaryMethod_ReportEvent<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequireJob<WithStreamedUnaryMethod_FetchDataFromMap<WithStreamedUnaryMethod_ReportJobStatus<WithStreamedUnaryMethod_ReportEvent<Service > > > > StreamedService;
};

}  // namespace masterSlaveRPC


#endif  // GRPC_rpc_2eproto__INCLUDED
