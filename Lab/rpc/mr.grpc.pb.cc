// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mr.proto

#include "mr.pb.h"
#include "mr.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace MapReduce {

static const char* RequireJob_method_names[] = {
  "/MapReduce.RequireJob/Require",
  "/MapReduce.RequireJob/Finish",
};

std::unique_ptr< RequireJob::Stub> RequireJob::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RequireJob::Stub> stub(new RequireJob::Stub(channel, options));
  return stub;
}

RequireJob::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Require_(RequireJob_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Finish_(RequireJob_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RequireJob::Stub::Require(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::MapReduce::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MapReduce::NodeMessage, ::MapReduce::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Require_, context, request, response);
}

void RequireJob::Stub::async::Require(::grpc::ClientContext* context, const ::MapReduce::NodeMessage* request, ::MapReduce::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MapReduce::NodeMessage, ::MapReduce::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Require_, context, request, response, std::move(f));
}

void RequireJob::Stub::async::Require(::grpc::ClientContext* context, const ::MapReduce::NodeMessage* request, ::MapReduce::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Require_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MapReduce::Reply>* RequireJob::Stub::PrepareAsyncRequireRaw(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MapReduce::Reply, ::MapReduce::NodeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Require_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MapReduce::Reply>* RequireJob::Stub::AsyncRequireRaw(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequireRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RequireJob::Stub::Finish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MapReduce::FinishMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Finish_, context, request, response);
}

void RequireJob::Stub::async::Finish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MapReduce::FinishMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Finish_, context, request, response, std::move(f));
}

void RequireJob::Stub::async::Finish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Finish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RequireJob::Stub::PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::MapReduce::FinishMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Finish_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RequireJob::Stub::AsyncFinishRaw(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinishRaw(context, request, cq);
  result->StartCall();
  return result;
}

RequireJob::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RequireJob_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RequireJob::Service, ::MapReduce::NodeMessage, ::MapReduce::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RequireJob::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MapReduce::NodeMessage* req,
             ::MapReduce::Reply* resp) {
               return service->Require(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RequireJob_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RequireJob::Service, ::MapReduce::FinishMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RequireJob::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MapReduce::FinishMsg* req,
             ::google::protobuf::Empty* resp) {
               return service->Finish(ctx, req, resp);
             }, this)));
}

RequireJob::Service::~Service() {
}

::grpc::Status RequireJob::Service::Require(::grpc::ServerContext* context, const ::MapReduce::NodeMessage* request, ::MapReduce::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RequireJob::Service::Finish(::grpc::ServerContext* context, const ::MapReduce::FinishMsg* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* HeartBeat_method_names[] = {
  "/MapReduce.HeartBeat/SendHeartBeat",
};

std::unique_ptr< HeartBeat::Stub> HeartBeat::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HeartBeat::Stub> stub(new HeartBeat::Stub(channel, options));
  return stub;
}

HeartBeat::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendHeartBeat_(HeartBeat_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HeartBeat::Stub::SendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::MapReduce::HeartBeatReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MapReduce::HeartBeatMsg, ::MapReduce::HeartBeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendHeartBeat_, context, request, response);
}

void HeartBeat::Stub::async::SendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg* request, ::MapReduce::HeartBeatReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MapReduce::HeartBeatMsg, ::MapReduce::HeartBeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendHeartBeat_, context, request, response, std::move(f));
}

void HeartBeat::Stub::async::SendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg* request, ::MapReduce::HeartBeatReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendHeartBeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MapReduce::HeartBeatReply>* HeartBeat::Stub::PrepareAsyncSendHeartBeatRaw(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MapReduce::HeartBeatReply, ::MapReduce::HeartBeatMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendHeartBeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MapReduce::HeartBeatReply>* HeartBeat::Stub::AsyncSendHeartBeatRaw(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendHeartBeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

HeartBeat::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HeartBeat_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HeartBeat::Service, ::MapReduce::HeartBeatMsg, ::MapReduce::HeartBeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HeartBeat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MapReduce::HeartBeatMsg* req,
             ::MapReduce::HeartBeatReply* resp) {
               return service->SendHeartBeat(ctx, req, resp);
             }, this)));
}

HeartBeat::Service::~Service() {
}

::grpc::Status HeartBeat::Service::SendHeartBeat(::grpc::ServerContext* context, const ::MapReduce::HeartBeatMsg* request, ::MapReduce::HeartBeatReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MapReduce

