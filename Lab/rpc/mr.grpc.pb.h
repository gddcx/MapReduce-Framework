// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mr.proto
#ifndef GRPC_mr_2eproto__INCLUDED
#define GRPC_mr_2eproto__INCLUDED

#include "mr.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace MapReduce {

class RequireJob final {
 public:
  static constexpr char const* service_full_name() {
    return "MapReduce.RequireJob";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Require(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::MapReduce::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::Reply>> AsyncRequire(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::Reply>>(AsyncRequireRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::Reply>> PrepareAsyncRequire(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::Reply>>(PrepareAsyncRequireRaw(context, request, cq));
    }
    virtual ::grpc::Status Finish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncFinish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncFinishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncFinish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncFinishRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Require(::grpc::ClientContext* context, const ::MapReduce::NodeMessage* request, ::MapReduce::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Require(::grpc::ClientContext* context, const ::MapReduce::NodeMessage* request, ::MapReduce::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Finish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Finish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::Reply>* AsyncRequireRaw(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::Reply>* PrepareAsyncRequireRaw(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncFinishRaw(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Require(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::MapReduce::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MapReduce::Reply>> AsyncRequire(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MapReduce::Reply>>(AsyncRequireRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MapReduce::Reply>> PrepareAsyncRequire(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MapReduce::Reply>>(PrepareAsyncRequireRaw(context, request, cq));
    }
    ::grpc::Status Finish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncFinish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncFinishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncFinish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncFinishRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Require(::grpc::ClientContext* context, const ::MapReduce::NodeMessage* request, ::MapReduce::Reply* response, std::function<void(::grpc::Status)>) override;
      void Require(::grpc::ClientContext* context, const ::MapReduce::NodeMessage* request, ::MapReduce::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Finish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Finish(::grpc::ClientContext* context, const ::MapReduce::FinishMsg* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MapReduce::Reply>* AsyncRequireRaw(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MapReduce::Reply>* PrepareAsyncRequireRaw(::grpc::ClientContext* context, const ::MapReduce::NodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncFinishRaw(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::MapReduce::FinishMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Require_;
    const ::grpc::internal::RpcMethod rpcmethod_Finish_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Require(::grpc::ServerContext* context, const ::MapReduce::NodeMessage* request, ::MapReduce::Reply* response);
    virtual ::grpc::Status Finish(::grpc::ServerContext* context, const ::MapReduce::FinishMsg* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Require : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Require() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Require() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Require(::grpc::ServerContext* /*context*/, const ::MapReduce::NodeMessage* /*request*/, ::MapReduce::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequire(::grpc::ServerContext* context, ::MapReduce::NodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::MapReduce::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Finish() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::MapReduce::FinishMsg* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinish(::grpc::ServerContext* context, ::MapReduce::FinishMsg* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Require<WithAsyncMethod_Finish<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Require : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Require() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MapReduce::NodeMessage, ::MapReduce::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MapReduce::NodeMessage* request, ::MapReduce::Reply* response) { return this->Require(context, request, response); }));}
    void SetMessageAllocatorFor_Require(
        ::grpc::MessageAllocator< ::MapReduce::NodeMessage, ::MapReduce::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MapReduce::NodeMessage, ::MapReduce::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Require() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Require(::grpc::ServerContext* /*context*/, const ::MapReduce::NodeMessage* /*request*/, ::MapReduce::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Require(
      ::grpc::CallbackServerContext* /*context*/, const ::MapReduce::NodeMessage* /*request*/, ::MapReduce::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Finish() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MapReduce::FinishMsg, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MapReduce::FinishMsg* request, ::google::protobuf::Empty* response) { return this->Finish(context, request, response); }));}
    void SetMessageAllocatorFor_Finish(
        ::grpc::MessageAllocator< ::MapReduce::FinishMsg, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MapReduce::FinishMsg, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::MapReduce::FinishMsg* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Finish(
      ::grpc::CallbackServerContext* /*context*/, const ::MapReduce::FinishMsg* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Require<WithCallbackMethod_Finish<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Require : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Require() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Require() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Require(::grpc::ServerContext* /*context*/, const ::MapReduce::NodeMessage* /*request*/, ::MapReduce::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Finish() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::MapReduce::FinishMsg* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Require : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Require() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Require() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Require(::grpc::ServerContext* /*context*/, const ::MapReduce::NodeMessage* /*request*/, ::MapReduce::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequire(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Finish() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::MapReduce::FinishMsg* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Require : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Require() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Require(context, request, response); }));
    }
    ~WithRawCallbackMethod_Require() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Require(::grpc::ServerContext* /*context*/, const ::MapReduce::NodeMessage* /*request*/, ::MapReduce::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Require(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Finish() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Finish(context, request, response); }));
    }
    ~WithRawCallbackMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::MapReduce::FinishMsg* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Finish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Require : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Require() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MapReduce::NodeMessage, ::MapReduce::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MapReduce::NodeMessage, ::MapReduce::Reply>* streamer) {
                       return this->StreamedRequire(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Require() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Require(::grpc::ServerContext* /*context*/, const ::MapReduce::NodeMessage* /*request*/, ::MapReduce::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequire(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MapReduce::NodeMessage,::MapReduce::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Finish() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MapReduce::FinishMsg, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MapReduce::FinishMsg, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedFinish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::MapReduce::FinishMsg* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MapReduce::FinishMsg,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Require<WithStreamedUnaryMethod_Finish<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Require<WithStreamedUnaryMethod_Finish<Service > > StreamedService;
};

class HeartBeat final {
 public:
  static constexpr char const* service_full_name() {
    return "MapReduce.HeartBeat";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::MapReduce::HeartBeatReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::HeartBeatReply>> AsyncSendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::HeartBeatReply>>(AsyncSendHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::HeartBeatReply>> PrepareAsyncSendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::HeartBeatReply>>(PrepareAsyncSendHeartBeatRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg* request, ::MapReduce::HeartBeatReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg* request, ::MapReduce::HeartBeatReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::HeartBeatReply>* AsyncSendHeartBeatRaw(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MapReduce::HeartBeatReply>* PrepareAsyncSendHeartBeatRaw(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::MapReduce::HeartBeatReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MapReduce::HeartBeatReply>> AsyncSendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MapReduce::HeartBeatReply>>(AsyncSendHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MapReduce::HeartBeatReply>> PrepareAsyncSendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MapReduce::HeartBeatReply>>(PrepareAsyncSendHeartBeatRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg* request, ::MapReduce::HeartBeatReply* response, std::function<void(::grpc::Status)>) override;
      void SendHeartBeat(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg* request, ::MapReduce::HeartBeatReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MapReduce::HeartBeatReply>* AsyncSendHeartBeatRaw(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MapReduce::HeartBeatReply>* PrepareAsyncSendHeartBeatRaw(::grpc::ClientContext* context, const ::MapReduce::HeartBeatMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendHeartBeat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendHeartBeat(::grpc::ServerContext* context, const ::MapReduce::HeartBeatMsg* request, ::MapReduce::HeartBeatReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendHeartBeat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHeartBeat(::grpc::ServerContext* /*context*/, const ::MapReduce::HeartBeatMsg* /*request*/, ::MapReduce::HeartBeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHeartBeat(::grpc::ServerContext* context, ::MapReduce::HeartBeatMsg* request, ::grpc::ServerAsyncResponseWriter< ::MapReduce::HeartBeatReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendHeartBeat<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendHeartBeat() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MapReduce::HeartBeatMsg, ::MapReduce::HeartBeatReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MapReduce::HeartBeatMsg* request, ::MapReduce::HeartBeatReply* response) { return this->SendHeartBeat(context, request, response); }));}
    void SetMessageAllocatorFor_SendHeartBeat(
        ::grpc::MessageAllocator< ::MapReduce::HeartBeatMsg, ::MapReduce::HeartBeatReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MapReduce::HeartBeatMsg, ::MapReduce::HeartBeatReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHeartBeat(::grpc::ServerContext* /*context*/, const ::MapReduce::HeartBeatMsg* /*request*/, ::MapReduce::HeartBeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendHeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::MapReduce::HeartBeatMsg* /*request*/, ::MapReduce::HeartBeatReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendHeartBeat<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendHeartBeat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHeartBeat(::grpc::ServerContext* /*context*/, const ::MapReduce::HeartBeatMsg* /*request*/, ::MapReduce::HeartBeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendHeartBeat() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHeartBeat(::grpc::ServerContext* /*context*/, const ::MapReduce::HeartBeatMsg* /*request*/, ::MapReduce::HeartBeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHeartBeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendHeartBeat() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendHeartBeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHeartBeat(::grpc::ServerContext* /*context*/, const ::MapReduce::HeartBeatMsg* /*request*/, ::MapReduce::HeartBeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendHeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendHeartBeat() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MapReduce::HeartBeatMsg, ::MapReduce::HeartBeatReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MapReduce::HeartBeatMsg, ::MapReduce::HeartBeatReply>* streamer) {
                       return this->StreamedSendHeartBeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendHeartBeat(::grpc::ServerContext* /*context*/, const ::MapReduce::HeartBeatMsg* /*request*/, ::MapReduce::HeartBeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendHeartBeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MapReduce::HeartBeatMsg,::MapReduce::HeartBeatReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendHeartBeat<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendHeartBeat<Service > StreamedService;
};

}  // namespace MapReduce


#endif  // GRPC_mr_2eproto__INCLUDED
